Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOL
    CADENA
    COMA
    COMILLAS_DOBL
    COMILLAS_SIMPL
    CONST
    CORCHETE_DER
    CORCHETE_IZQ
    DIVISION
    DOUBLE
    ELSE
    ES_IGUAL
    FALSE
    FINAL
    FOR
    FUNCION
    IF
    IN
    INCREMENTADOR
    INT
    LIST
    LLAVEL
    LLAVER
    MAIN
    MAS
    MAYOR_O_IGUAL
    MAYOR_QUE
    MENOR_O_IGUAL
    MENOR_QUE
    MULTIPL
    NEGACION
    NO_IGUAL
    OR
    PARSE
    PUNTO
    READLINESYNC
    RESTA
    RETURN
    SALTO_LINEA
    STDIN
    STRING
    TABULACION
    TODOUBLE
    TOINT
    TOSTRING
    TRUE
    VAR
    VOID
    WRITE

Grammar

Rule 0     S' -> asignacion
Rule 1     asignacion -> VARIABLE IGUAL tipodato PUNTOCOMA
Rule 2     salida -> PRINT LPARENT tipodato RPARENT PUNTOCOMA
Rule 3     funcion -> VARIABLE LPARENT argumentos RPARENT PUNTOCOMA
Rule 4     argumentos -> VARIABLE
Rule 5     argumentos -> tipodato argumentos
Rule 6     tipodato -> INTEGER
Rule 7     tipodato -> VARIABLE

Terminals, with rules where they appear

AND                  : 
BOOL                 : 
CADENA               : 
COMA                 : 
COMILLAS_DOBL        : 
COMILLAS_SIMPL       : 
CONST                : 
CORCHETE_DER         : 
CORCHETE_IZQ         : 
DIVISION             : 
DOUBLE               : 
ELSE                 : 
ES_IGUAL             : 
FALSE                : 
FINAL                : 
FOR                  : 
FUNCION              : 
IF                   : 
IGUAL                : 1
IN                   : 
INCREMENTADOR        : 
INT                  : 
INTEGER              : 6
LIST                 : 
LLAVEL               : 
LLAVER               : 
LPARENT              : 2 3
MAIN                 : 
MAS                  : 
MAYOR_O_IGUAL        : 
MAYOR_QUE            : 
MENOR_O_IGUAL        : 
MENOR_QUE            : 
MULTIPL              : 
NEGACION             : 
NO_IGUAL             : 
OR                   : 
PARSE                : 
PRINT                : 2
PUNTO                : 
PUNTOCOMA            : 1 2 3
READLINESYNC         : 
RESTA                : 
RETURN               : 
RPARENT              : 2 3
SALTO_LINEA          : 
STDIN                : 
STRING               : 
TABULACION           : 
TODOUBLE             : 
TOINT                : 
TOSTRING             : 
TRUE                 : 
VAR                  : 
VARIABLE             : 1 3 4 7
VOID                 : 
WRITE                : 
error                : 

Nonterminals, with rules where they appear

argumentos           : 3 5
asignacion           : 0
funcion              : 
salida               : 
tipodato             : 1 2 5

Parsing method: LALR

state 0

    (0) S' -> . asignacion
    (1) asignacion -> . VARIABLE IGUAL tipodato PUNTOCOMA

    VARIABLE        shift and go to state 2

    asignacion                     shift and go to state 1

state 1

    (0) S' -> asignacion .



state 2

    (1) asignacion -> VARIABLE . IGUAL tipodato PUNTOCOMA

    IGUAL           shift and go to state 3


state 3

    (1) asignacion -> VARIABLE IGUAL . tipodato PUNTOCOMA
    (6) tipodato -> . INTEGER
    (7) tipodato -> . VARIABLE

    INTEGER         shift and go to state 6
    VARIABLE        shift and go to state 4

    tipodato                       shift and go to state 5

state 4

    (7) tipodato -> VARIABLE .

    PUNTOCOMA       reduce using rule 7 (tipodato -> VARIABLE .)


state 5

    (1) asignacion -> VARIABLE IGUAL tipodato . PUNTOCOMA

    PUNTOCOMA       shift and go to state 7


state 6

    (6) tipodato -> INTEGER .

    PUNTOCOMA       reduce using rule 6 (tipodato -> INTEGER .)


state 7

    (1) asignacion -> VARIABLE IGUAL tipodato PUNTOCOMA .

    $end            reduce using rule 1 (asignacion -> VARIABLE IGUAL tipodato PUNTOCOMA .)

