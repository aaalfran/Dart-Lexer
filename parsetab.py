
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS AUTODECREMENTO AUTOINCREMENTO BOOL BREAK CADENA COMA CONST CONTINUE CORCH_DER CORCH_IZQ DIVISION DOSPUNTOS DOUBLE ELSE ES_IGUAL FALSE FINAL FLOAT FOR FUNCION IF IGUAL IN INCREMENTADOR INT INTEGER JOIN LIST LLAVEL LLAVER LPARENT MAIN MAP MAS MAYOR_O_IGUAL MAYOR_QUE MENOR_O_IGUAL MENOR_QUE MULTIPL NEGACION NO_IGUAL OR PARSE PRINT PUNTO PUNTOCOMA READLINESYNC RESTA RETURN RPARENT SALTO_LINEA SET STDIN STDOUT STRING TABULACION TODOUBLE TOINT TOSTRING TRUE VAR VARIABLE VOID WHILE WRITE\n    valores : valor\n            | valor COMA valores\n    \n    operador_mat : MAS\n                  | RESTA\n                  | MULTIPL\n                  | DIVISION\n\n    \n    all : simbolos_globales\n    \n      clave_valor : valor DOSPUNTOS valor\n    \n    simbolo_global : declaracion_asign\n                    | funcion\n    \n    operando_mat : numero\n                  | VARIABLE\n                  | indexacion\n                  | negativo\n                  | ejecutar_funcion\n                  | casting_num\n    \n    claves_valores : clave_valor\n                    | clave_valor COMA claves_valores\n    \n    simbolos_globales : simbolo_global\n                      | simbolo_global simbolos_globales\n                      | empty\n    \n     cuerpo_lista_string : CADENA\n                     | CADENA COMA CADENA\n                     | CADENA COMA CADENA COMA cuerpo_lista_string\n     \n    casting_num : LPARENT valor AS INT RPARENT\n                  | LPARENT valor AS DOUBLE RPARENT\n    \n    empty :\n    \n     cuerpo_lista_integer : INTEGER\n                     | INTEGER COMA INTEGER\n                     | INTEGER COMA INTEGER COMA cuerpo_lista_integer\n     \n    operacion_mat_sin_par : operando_mat operador_mat operacion_mat\n                          | VARIABLE operador_mat operacion_mat\n    \n    sentencia : declaracion_var\n              | asignacion\n              | declaracion_asign\n              | operaciones PUNTOCOMA\n              | print\n              | estructura_control\n              | return\n              | continue\n              | break\n    \n     cuerpo_lista_double : FLOAT\n                     | FLOAT COMA FLOAT\n                     | FLOAT COMA FLOAT COMA cuerpo_lista_double\n     \n    operacion_mat_con_par : LPARENT operacion_mat_sin_par RPARENT\n    \n     cuerpo_lista_boolean : bool\n                     | bool COMA bool\n                     | bool COMA bool COMA cuerpo_lista_boolean\n     \n    operacion_mat_pos : operacion_mat_con_par\n                      | RESTA operacion_mat_con_par\n                      | operacion_mat_con_par operador_mat operacion_mat_pos\n                      | operacion_mat_sin_par\n                      | operando_mat\n    \n    sentencias : sentencia\n                | sentencia sentencias\n                | empty\n    \n    lista :  LIST MENOR_QUE STRING MAYOR_QUE VARIABLE IGUAL CORCH_IZQ cuerpo_lista_string CORCH_DER PUNTOCOMA\n           | LIST MENOR_QUE INT MAYOR_QUE VARIABLE IGUAL CORCH_IZQ cuerpo_lista_integer CORCH_DER PUNTOCOMA\n           | LIST MENOR_QUE DOUBLE MAYOR_QUE VARIABLE IGUAL CORCH_IZQ cuerpo_lista_double CORCH_DER PUNTOCOMA\n           | LIST MENOR_QUE BOOL MAYOR_QUE VARIABLE IGUAL CORCH_IZQ cuerpo_lista_boolean CORCH_DER PUNTOCOMA\n    \n    numero : INTEGER\n            | FLOAT\n    \n    operacion_mat_neg : RESTA operacion_mat_con_par\n                      | RESTA operacion_mat_con_par operador_mat operacion_mat_pos\n    string : CADENA MAS CADENA\n    bool : TRUE\n          | FALSE\n    \n    operacion_mat : operacion_mat_pos\n                  | operacion_mat_neg\n    string : CADENA MULTIPL CADENAcasting : CADENA PUNTO TOINT LPARENT RPARENTcasting : CADENA PUNTO TODOUBLE LPARENT RPARENTcasting : INTEGER PUNTO TOSTRING LPARENT RPARENT\n                | FLOAT PUNTO TOSTRING LPARENT RPARENT\n    datos : numero\n          | CADENA\n          | bool\n    \n    operador_comp_orden : MAYOR_QUE\n                  | MENOR_QUE\n                  | MENOR_O_IGUAL\n                  | MAYOR_O_IGUAL\n    \n    conjunto : LLAVEL valores LLAVER\n              | LLAVEL LLAVER\n    \n    valor : datos\n          | operaciones\n          | VARIABLE\n          | estructura_dato\n          | indexacion\n          | read\n          | ejecutar_funcion\n          | negativo\n          | casting\n    \n    operando_comp_orden : operacion_mat\n                        | numero\n                        | VARIABLE\n                        | indexacion\n                        | ejecutar_funcion\n                        | negativo\n    \n    mapa : LLAVEL claves_valores LLAVER\n        | LLAVEL LLAVER\n    \n    operacion_comp_orden_sin_par : operando_comp_orden operador_comp_orden operando_comp_orden\n    \n    estructura_dato : lista\n                    | conjunto\n                    | mapa\n    \n    negativo : RESTA numero\n              | RESTA VARIABLE\n              | RESTA indexacion\n              | RESTA ejecutar_funcion\n\n    \n    operacion_comp_orden_con_par : LPARENT operacion_comp_orden_sin_par RPARENT\n    indexacion : VARIABLE CORCH_IZQ valor CORCH_IZQ\n    operacion_comp_orden : operacion_comp_orden_sin_par\n                        | operacion_comp_orden_con_par\n    \n    tipo_dato : BOOL\n              | DOUBLE\n              | INT\n              | STRING\n              | VOID\n              | LIST\n              | SET\n              | MAP\n    \n    operando_comp_eq : numero\n                    | bool\n                    | CADENA\n                    | operacion_mat\n                    | operacion_comp_orden\n                    | operacion_comp_con_par\n                    | indexacion\n                    | ejecutar_funcion\n                    | VARIABLE\n                    | operacion_log_con_par\n                    | negativo\n                    | LPARENT valor AS BOOL RPARENT\n    \n    declaradores : tipo_dato\n                  | FINAL\n                  | VAR\n    \n    declaracion_var : declaradores VARIABLE PUNTOCOMA\n    \n    operador_comp_eq : IGUAL\n                    | NO_IGUAL\n    \n    declaracion_asign : tipo_dato VARIABLE IGUAL valor PUNTOCOMA\n                      | FINAL VARIABLE IGUAL valor PUNTOCOMA\n                      | VAR VARIABLE IGUAL valor PUNTOCOMA\n                      | CONST VARIABLE IGUAL valor PUNTOCOMA\n    \n    operacion_comp_eq : operando_comp_eq operador_comp_eq operando_comp_eq\n    \n    operacion_comp_sin_par : operacion_comp_eq\n                    | operacion_comp_orden\n    \n    asignacion : VARIABLE IGUAL valor PUNTOCOMA\n                | VARIABLE CORCH_IZQ valor CORCH_DER IGUAL valor PUNTOCOMA\n                | operacion_autoasig PUNTOCOMA\n                | declaracion_asign\n    \n    operacion_comp_con_par : LPARENT operacion_comp_sin_par RPARENT\n    print : PRINT LPARENT valor RPARENT PUNTOCOMA\n    operacion_comp : operacion_comp_con_par\n                    | operacion_comp_sin_par\n    \n    cuerpo_estruct : LLAVEL sentencias LLAVER\n                    | sentencia\n    \n    operadores_log : AND\n                    | OR\n    \n    for : FOR LPARENT IGUAL operacion_log PUNTOCOMA operaciones RPARENT cuerpo_estruct\n        | FOR LPARENT VARIABLE IN VARIABLE RPARENT cuerpo_estruct\n        | FOR LPARENT tipo_dato VARIABLE IN VARIABLE RPARENT cuerpo_estruct\n        | FOR LPARENT VAR VARIABLE IN VARIABLE RPARENT cuerpo_estruct\n    \n    operandos_log : operacion_comp\n                    | operacion_log_not\n                    | VARIABLE\n                    | bool\n                    | ejecutar_funcion\n                    | indexacion\n    \n    if : IF LPARENT operacion_log RPARENT cuerpo_estruct\n    \n    operacion_log_sin_par : operandos_log operadores_log operacion_log\n                          | operandos_log\n    \n    if_else : IF LPARENT operacion_log RPARENT cuerpo_estruct ELSE cuerpo_estruct\n    \n    operacion_log_con_par : LPARENT operacion_log_sin_par RPARENT\n    \n    while : WHILE LPARENT operacion_log RPARENT cuerpo_estruct\n    \n    operando_log_not : bool\n                    | operacion_log_con_par\n                    | VARIABLE\n    \n    estructura_control : if\n                        | if_else\n                        | while\n                        | for\n    \n    operacion_log_not_sin_par : NEGACION operando_log_not\n    break : BREAK PUNTOCOMAcontinue : CONTINUE PUNTOCOMA\n    operacion_log_not_con_par : LPARENT NEGACION operando_log_not RPARENT\n    \n    read : STDIN PUNTO READLINESYNC LPARENT RPARENT PUNTOCOMA\n    \n    operacion_log_not : operacion_log_not_sin_par\n                        | operacion_log_not_con_par\n    \n    read : STDOUT PUNTO WRITE LPARENT CADENA RPARENT PUNTOCOMA\n    \n    operacion_log : operacion_log_con_par\n                  | operacion_log_con_par operadores_log operacion_log\n                  | operacion_log_sin_par\n                  | operacion_log_not\n                  | operandos_log\n    \n    return : RETURN valor PUNTOCOMA\n            | RETURN PUNTOCOMA\n    \n    arg_funcion : VARIABLE\n                | VAR VARIABLE\n                | tipo_dato VARIABLE\n    \n    operacion_unaria : VARIABLE AUTOINCREMENTO\n                      | VARIABLE AUTODECREMENTO\n                      | AUTOINCREMENTO VARIABLE\n                      | AUTODECREMENTO VARIABLE\n    \n    args_funcion : arg_funcion COMA args_funcion\n                  | arg_funcion\n                  | empty\n    \n    operaciones : operacion_mat\n                | operacion_log\n                | operacion_unaria\n                | operacion_autoasig\n    \n    funcion : tipo_dato VARIABLE LPARENT args_funcion RPARENT LLAVEL sentencias LLAVER\n    operacion_autoasig : VARIABLE operador_mat IGUAL operacion_mat\n    ejecutar_funcion : VARIABLE LPARENT valores RPARENT\n                      | VARIABLE LPARENT RPARENT\n    casting : LPARENT valor AS tipo_dato RPARENT'
    
_lr_action_items = {'VARIABLE':([0,23,25,36,37,39,47,56,57,58,61,62,63,64,65,68,72,92,95,96,97,98,107,108,113,114,115,116,117,118,119,120,121,127,129,130,138,150,152,153,156,160,176,177,179,181,195,205,207,231,238,239,240,241,246,],[5,75,86,99,100,5,112,5,5,5,126,-3,-4,-5,-6,139,112,126,161,-156,-157,161,126,126,161,193,-137,-138,199,-78,-79,-80,-81,126,86,209,139,126,126,5,86,233,5,5,86,247,249,126,75,139,263,264,265,266,139,]),'CADENA':([0,23,39,56,57,58,68,95,96,97,98,113,114,115,116,130,138,153,160,176,177,181,195,207,227,231,246,277,290,305,],[13,13,13,13,13,13,13,166,-156,-157,166,166,166,-137,-138,13,13,13,13,13,13,13,13,13,259,13,13,282,298,282,]),'STDIN':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'STDOUT':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'RESTA':([0,5,7,9,10,12,23,26,27,39,40,42,46,56,57,58,61,62,63,64,65,68,75,76,77,78,80,82,85,86,87,88,89,90,91,92,95,96,97,98,107,108,113,114,115,116,117,118,119,120,121,125,126,127,130,131,132,133,134,138,139,140,141,142,143,146,150,152,153,155,160,161,163,164,165,168,176,177,181,187,191,192,193,194,195,198,199,200,201,202,203,204,205,207,209,210,211,212,231,233,234,235,246,247,249,256,257,],[25,63,-13,-15,-14,-11,25,-61,-62,25,63,63,-16,25,25,25,129,-3,-4,-5,-6,25,63,-13,-15,-14,63,-11,-105,-106,-107,-108,63,-61,-62,156,25,-156,-157,25,179,129,25,25,-137,-138,25,-78,-79,-80,-81,-213,63,129,25,-11,-13,-14,-15,25,63,-13,-15,-14,-11,-45,129,179,25,63,25,63,-15,-13,-11,-14,25,25,25,-11,-13,-15,63,-14,25,-11,63,-13,-15,-14,-110,-212,129,25,63,-13,-15,-11,25,63,-13,-15,25,63,63,-25,-26,]),'INTEGER':([0,23,25,39,56,57,58,61,62,63,64,65,68,92,95,96,97,98,107,108,113,114,115,116,117,118,119,120,121,127,129,130,138,150,152,153,156,160,176,177,179,181,195,205,207,231,246,278,292,306,],[26,26,90,26,26,26,26,90,-3,-4,-5,-6,26,90,90,-156,-157,90,90,90,90,90,-137,-138,90,-78,-79,-80,-81,90,90,26,26,90,90,26,90,26,26,26,90,26,26,90,26,26,26,284,300,284,]),'FLOAT':([0,23,25,39,56,57,58,61,62,63,64,65,68,92,95,96,97,98,107,108,113,114,115,116,117,118,119,120,121,127,129,130,138,150,152,153,156,160,176,177,179,181,195,205,207,231,246,279,294,307,],[27,27,91,27,27,27,27,91,-3,-4,-5,-6,27,91,91,-156,-157,91,91,91,91,91,-137,-138,91,-78,-79,-80,-81,91,91,27,27,91,91,27,91,27,27,27,91,27,27,91,27,27,27,286,302,286,]),'LPARENT':([0,5,23,25,39,47,56,57,58,61,62,63,64,65,68,72,75,86,92,95,96,97,98,107,108,113,114,115,116,117,118,119,120,121,126,127,129,130,135,136,137,138,139,150,151,152,153,157,158,160,161,176,177,179,181,193,195,199,205,207,209,231,233,246,247,249,],[23,58,68,92,23,113,23,23,23,130,-3,-4,-5,-6,138,113,58,58,153,160,-156,-157,160,130,130,181,195,-137,-138,130,-78,-79,-80,-81,58,130,92,207,213,214,215,138,58,130,227,130,23,229,230,231,58,23,23,92,246,58,138,58,130,68,58,138,58,138,58,58,]),'TRUE':([0,23,39,47,56,57,58,68,72,95,96,97,98,113,114,115,116,130,138,153,160,176,177,181,195,207,231,246,280,296,308,],[28,28,28,28,28,28,28,28,28,28,-156,-157,28,28,28,-137,-138,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'FALSE':([0,23,39,47,56,57,58,68,72,95,96,97,98,113,114,115,116,130,138,153,160,176,177,181,195,207,231,246,280,296,308,],[29,29,29,29,29,29,29,29,29,29,-156,-157,29,29,29,-137,-138,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'AUTOINCREMENTO':([0,5,23,39,56,57,58,68,75,130,138,139,153,160,176,177,181,195,207,209,231,233,246,247,249,],[36,59,36,36,36,36,36,36,59,36,36,59,36,36,36,36,36,36,36,59,36,59,36,59,59,]),'AUTODECREMENTO':([0,5,23,39,56,57,58,68,75,130,138,139,153,160,176,177,181,195,207,209,231,233,246,247,249,],[37,60,37,37,37,37,37,37,60,37,37,60,37,37,37,37,37,37,37,60,37,60,37,60,60,]),'LIST':([0,23,39,56,57,58,68,130,138,144,153,160,176,177,181,195,207,231,246,254,],[38,38,38,38,38,38,38,38,38,223,38,38,38,38,38,38,38,38,38,223,]),'LLAVEL':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'NEGACION':([0,23,39,56,57,58,68,95,96,97,98,113,130,138,153,160,176,177,181,195,207,231,246,],[47,72,47,47,47,47,72,47,-156,-157,47,47,47,72,47,72,47,47,72,47,72,72,72,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,40,41,42,43,44,45,46,48,49,50,51,53,54,59,60,85,86,87,88,89,90,91,99,100,103,109,110,111,112,122,125,126,128,131,132,133,134,145,146,148,149,159,161,162,163,164,166,167,169,174,175,178,180,185,186,187,188,189,190,191,192,193,194,196,197,198,199,200,201,202,203,204,206,226,228,245,251,252,255,256,257,258,260,261,269,276,297,299,301,303,],[0,-1,-84,-85,-12,-87,-13,-89,-15,-14,-92,-11,-76,-77,-206,-207,-208,-209,-102,-103,-104,-61,-62,-66,-67,-68,-69,-189,-191,-163,-170,-49,-52,-53,-186,-187,-162,-16,-152,-153,-144,-145,-111,-112,-199,-200,-105,-106,-107,-108,-50,-61,-62,-201,-202,-83,-181,-174,-175,-176,-2,-213,-12,-32,-11,-13,-14,-15,-172,-45,-150,-109,-190,-164,-165,-166,-167,-123,-124,-169,-82,-99,-51,-31,-130,-143,-11,-122,-125,-126,-13,-15,-12,-14,-101,-93,-11,-12,-13,-15,-14,-110,-212,-211,-184,-64,-50,-71,-72,-214,-25,-26,-132,-73,-74,-185,-188,-57,-58,-59,-60,]),'LLAVER':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,44,45,46,48,49,50,51,53,54,59,60,85,86,87,88,89,90,91,99,100,102,103,104,105,106,109,110,111,112,122,125,126,128,131,132,133,134,145,146,148,149,159,161,162,163,164,166,167,169,174,175,178,180,185,186,187,188,189,190,191,192,193,194,196,197,198,199,200,201,202,203,204,206,226,228,242,243,245,251,252,255,256,257,258,260,261,269,276,297,299,301,303,],[-1,-84,-85,-12,-87,-13,-89,-15,-14,-92,-11,-76,-77,-206,-207,-208,-209,-102,-103,-104,-61,-62,-66,-67,-68,-69,-189,-191,-163,-170,103,-49,-52,-53,-186,-187,-162,-16,-152,-153,-144,-145,-111,-112,-199,-200,-105,-106,-107,-108,-50,-61,-62,-201,-202,174,-83,175,-1,-17,-181,-174,-175,-176,-2,-213,-12,-32,-11,-13,-14,-15,-172,-45,-150,-109,-190,-164,-165,-166,-167,-123,-124,-169,-82,-99,-51,-31,-130,-143,-11,-122,-125,-126,-13,-15,-12,-14,-101,-93,-11,-12,-13,-15,-14,-110,-212,-211,-184,-64,-8,-18,-50,-71,-72,-214,-25,-26,-132,-73,-74,-185,-188,-57,-58,-59,-60,]),'RPARENT':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,40,41,42,43,44,45,46,48,49,50,51,53,54,58,59,60,70,71,73,74,75,76,77,79,83,85,86,87,88,89,90,91,99,100,103,109,110,111,112,122,124,125,126,128,131,132,133,134,139,140,141,145,146,147,148,149,154,159,161,162,163,164,166,167,169,174,175,178,180,182,183,184,185,186,187,188,189,190,191,192,193,194,196,197,198,199,200,201,202,203,204,206,213,214,215,217,218,219,220,221,222,223,224,225,226,228,229,230,233,234,235,236,245,247,248,249,251,252,255,256,257,258,259,260,261,267,268,269,271,276,297,299,301,303,],[-1,-84,-85,-12,-87,-13,-89,-15,-14,-92,-11,-76,-77,-206,-207,-208,-209,-102,-103,-104,-61,-62,-66,-67,-68,-69,-189,-191,-163,-170,-49,-52,-53,-186,-187,-162,-16,-152,-153,-144,-145,-111,-112,125,-199,-200,145,146,148,149,-164,-167,-166,-170,-163,-105,-106,-107,-108,-50,-61,-62,-201,-202,-83,-181,-174,-175,-176,-2,204,-213,-12,-32,-11,-13,-14,-15,-164,-167,-166,-172,-45,226,-150,-109,146,-190,-164,-165,-166,-167,-123,-124,-169,-82,-99,-51,-31,145,-170,-163,-130,-143,-11,-122,-125,-126,-13,-15,-12,-14,-101,-93,-11,-12,-13,-15,-14,-110,-212,-211,251,252,253,255,256,257,258,-116,-117,-118,-119,-120,-184,-64,260,261,-164,-167,-166,-165,-50,-164,-152,-164,-71,-72,-214,-25,-26,-132,270,-73,-74,256,257,-185,258,-188,-57,-58,-59,-60,]),'COMA':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,40,41,42,43,44,45,46,48,49,50,51,53,54,59,60,85,86,87,88,89,90,91,99,100,103,105,106,109,110,111,112,125,126,128,131,132,133,134,145,146,148,149,159,161,162,163,164,166,167,169,174,175,178,180,185,186,187,188,189,190,191,192,193,194,196,197,198,199,200,201,202,203,204,206,226,228,242,245,251,252,255,256,257,258,260,261,269,276,282,284,286,288,297,298,299,300,301,302,303,304,],[56,-84,-85,-12,-87,-13,-89,-15,-14,-92,-11,-76,-77,-206,-207,-208,-209,-102,-103,-104,-61,-62,-66,-67,-68,-69,-189,-191,-163,-170,-49,-52,-53,-186,-187,-162,-16,-152,-153,-144,-145,-111,-112,-199,-200,-105,-106,-107,-108,-50,-61,-62,-201,-202,-83,56,177,-181,-174,-175,-176,-213,-12,-32,-11,-13,-14,-15,-172,-45,-150,-109,-190,-164,-165,-166,-167,-123,-124,-169,-82,-99,-51,-31,-130,-143,-11,-122,-125,-126,-13,-15,-12,-14,-101,-93,-11,-12,-13,-15,-14,-110,-212,-211,-184,-64,-8,-50,-71,-72,-214,-25,-26,-132,-73,-74,-185,-188,290,292,294,296,-57,305,-58,306,-59,307,-60,308,]),'AS':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,40,41,42,43,44,45,46,48,49,50,51,53,54,59,60,69,70,71,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,99,100,103,109,110,111,112,125,126,128,131,132,133,134,139,140,141,142,143,145,146,147,148,149,159,161,162,163,164,166,167,169,174,175,178,180,185,186,187,188,189,190,191,192,193,194,196,197,198,199,200,201,202,203,204,206,208,209,210,211,212,216,226,228,232,233,234,235,236,237,245,247,248,249,251,252,255,256,257,258,260,261,269,276,297,299,301,303,],[-84,-85,-12,-87,-13,-89,-15,-14,-92,-11,-76,-77,-206,-207,-208,-209,-102,-103,-104,-61,-62,-66,-67,-68,-69,-189,-191,-163,-170,-49,-52,-53,-186,-187,-162,-16,-152,-153,-144,-145,-111,-112,-199,-200,144,-191,-52,-153,-111,-12,-13,-15,-14,-170,-53,-206,-11,-163,-105,-106,-107,-108,-50,-61,-62,-201,-202,-83,-181,-174,-175,-176,-213,-12,-32,-11,-13,-14,-15,-12,-13,-15,-14,-11,-172,-45,-181,-150,-109,-190,-164,-165,-166,-167,-123,-124,-169,-82,-99,-51,-31,-130,-143,-11,-122,-125,-126,-13,-15,-12,-14,-101,-93,-11,-12,-13,-15,-14,-110,-212,-211,250,-12,-13,-15,-11,254,-184,-64,262,-12,-13,-15,-77,-189,-50,-12,-152,-12,-71,-72,-214,-25,-26,-132,-73,-74,-185,-188,-57,-58,-59,-60,]),'DOSPUNTOS':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,40,41,42,43,44,45,46,48,49,50,51,53,54,59,60,85,86,87,88,89,90,91,99,100,103,105,109,110,111,112,125,126,128,131,132,133,134,145,146,148,149,159,161,162,163,164,166,167,169,174,175,178,180,185,186,187,188,189,190,191,192,193,194,196,197,198,199,200,201,202,203,204,206,226,228,244,245,251,252,255,256,257,258,260,261,269,276,297,299,301,303,],[-84,-85,-12,-87,-13,-89,-15,-14,-92,-11,-76,-77,-206,-207,-208,-209,-102,-103,-104,-61,-62,-66,-67,-68,-69,-189,-191,-163,-170,-49,-52,-53,-186,-187,-162,-16,-152,-153,-144,-145,-111,-112,-199,-200,-105,-106,-107,-108,-50,-61,-62,-201,-202,-83,176,-181,-174,-175,-176,-213,-12,-32,-11,-13,-14,-15,-172,-45,-150,-109,-190,-164,-165,-166,-167,-123,-124,-169,-82,-99,-51,-31,-130,-143,-11,-122,-125,-126,-13,-15,-12,-14,-101,-93,-11,-12,-13,-15,-14,-110,-212,-211,-184,-64,176,-50,-71,-72,-214,-25,-26,-132,-73,-74,-185,-188,-57,-58,-59,-60,]),'CORCH_IZQ':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,40,41,42,43,44,45,46,48,49,50,51,53,54,59,60,75,85,86,87,88,89,90,91,99,100,103,109,110,111,112,123,125,126,128,131,132,133,134,139,145,146,148,149,159,161,162,163,164,166,167,169,174,175,178,180,185,186,187,188,189,190,191,192,193,194,196,197,198,199,200,201,202,203,204,206,209,226,228,233,245,247,249,251,252,255,256,257,258,260,261,269,272,273,274,275,276,297,299,301,303,],[-84,-85,57,-87,-13,-89,-15,-14,-92,-11,-76,-77,-206,-207,-208,-209,-102,-103,-104,-61,-62,-66,-67,-68,-69,-189,-191,-163,-170,-49,-52,-53,-186,-187,-162,-16,-152,-153,-144,-145,-111,-112,-199,-200,57,-105,57,-107,-108,-50,-61,-62,-201,-202,-83,-181,-174,-175,-176,203,-213,57,-32,-11,-13,-14,-15,57,-172,-45,-150,-109,-190,57,-165,-166,-167,-123,-124,-169,-82,-99,-51,-31,-130,-143,-11,-122,-125,-126,-13,-15,57,-14,-101,-93,-11,57,-13,-15,-14,-110,-212,-211,57,-184,-64,57,-50,57,57,-71,-72,-214,-25,-26,-132,-73,-74,-185,277,278,279,280,-188,-57,-58,-59,-60,]),'AND':([5,7,9,14,28,29,30,31,32,34,35,40,41,42,43,44,45,46,48,49,50,51,53,54,73,74,75,76,77,79,83,85,86,87,88,89,90,91,109,110,111,112,125,126,128,131,132,133,134,139,140,141,145,146,147,148,149,161,162,163,164,166,167,178,180,183,184,185,186,187,188,189,190,191,192,193,194,196,197,198,199,200,201,202,203,204,209,210,211,226,228,233,234,235,236,237,245,247,248,249,256,257,258,],[-164,-167,-166,-165,-66,-67,-68,-69,96,-163,96,-49,-52,-53,-186,-187,-162,-16,-152,-153,-144,-145,-111,-112,-153,-111,-164,-167,-166,96,-163,-105,-106,-107,-108,-50,-61,-62,-181,-174,-175,-176,-213,-12,-32,-11,-13,-14,-15,-164,-167,-166,-172,-45,-181,-150,-109,-164,-165,-166,-167,-123,-124,-51,-31,96,-163,-130,-143,-11,-122,-125,-126,-13,-15,-12,-14,-101,-93,-11,-12,-13,-15,-14,-110,-212,-164,-167,-166,-184,-64,-164,-167,-166,-165,96,-50,-164,-152,-164,-25,-26,-132,]),'OR':([5,7,9,14,28,29,30,31,32,34,35,40,41,42,43,44,45,46,48,49,50,51,53,54,73,74,75,76,77,79,83,85,86,87,88,89,90,91,109,110,111,112,125,126,128,131,132,133,134,139,140,141,145,146,147,148,149,161,162,163,164,166,167,178,180,183,184,185,186,187,188,189,190,191,192,193,194,196,197,198,199,200,201,202,203,204,209,210,211,226,228,233,234,235,236,237,245,247,248,249,256,257,258,],[-164,-167,-166,-165,-66,-67,-68,-69,97,-163,97,-49,-52,-53,-186,-187,-162,-16,-152,-153,-144,-145,-111,-112,-153,-111,-164,-167,-166,97,-163,-105,-106,-107,-108,-50,-61,-62,-181,-174,-175,-176,-213,-12,-32,-11,-13,-14,-15,-164,-167,-166,-172,-45,-181,-150,-109,-164,-165,-166,-167,-123,-124,-51,-31,97,-163,-130,-143,-11,-122,-125,-126,-13,-15,-12,-14,-101,-93,-11,-12,-13,-15,-14,-110,-212,-164,-167,-166,-184,-64,-164,-167,-166,-165,97,-50,-164,-152,-164,-25,-26,-132,]),'MAS':([5,7,9,10,12,26,27,40,42,46,75,76,77,78,80,82,85,86,87,88,89,90,91,125,126,131,132,133,134,139,140,141,142,143,146,155,161,163,164,165,168,187,191,192,193,194,198,199,200,201,202,203,204,209,210,211,212,233,234,235,247,249,256,257,],[62,-13,-15,-14,-11,-61,-62,62,62,-16,62,-13,-15,-14,62,-11,-105,-106,-107,-108,62,-61,-62,-213,62,-11,-13,-14,-15,62,-13,-15,-14,-11,-45,62,62,-15,-13,-11,-14,-11,-13,-15,62,-14,-11,62,-13,-15,-14,-110,-212,62,-13,-15,-11,62,-13,-15,62,62,-25,-26,]),'MULTIPL':([5,7,9,10,12,26,27,40,42,46,75,76,77,78,80,82,85,86,87,88,89,90,91,125,126,131,132,133,134,139,140,141,142,143,146,155,161,163,164,165,168,187,191,192,193,194,198,199,200,201,202,203,204,209,210,211,212,233,234,235,247,249,256,257,],[64,-13,-15,-14,-11,-61,-62,64,64,-16,64,-13,-15,-14,64,-11,-105,-106,-107,-108,64,-61,-62,-213,64,-11,-13,-14,-15,64,-13,-15,-14,-11,-45,64,64,-15,-13,-11,-14,-11,-13,-15,64,-14,-11,64,-13,-15,-14,-110,-212,64,-13,-15,-11,64,-13,-15,64,64,-25,-26,]),'DIVISION':([5,7,9,10,12,26,27,40,42,46,75,76,77,78,80,82,85,86,87,88,89,90,91,125,126,131,132,133,134,139,140,141,142,143,146,155,161,163,164,165,168,187,191,192,193,194,198,199,200,201,202,203,204,209,210,211,212,233,234,235,247,249,256,257,],[65,-13,-15,-14,-11,-61,-62,65,65,-16,65,-13,-15,-14,65,-11,-105,-106,-107,-108,65,-61,-62,-213,65,-11,-13,-14,-15,65,-13,-15,-14,-11,-45,65,65,-15,-13,-11,-14,-11,-13,-15,65,-14,-11,65,-13,-15,-14,-110,-212,65,-13,-15,-11,65,-13,-15,65,65,-25,-26,]),'IGUAL':([5,7,9,10,12,13,14,15,26,27,28,29,30,31,32,40,41,42,46,48,51,52,53,54,61,62,63,64,65,71,74,75,76,77,78,80,81,82,85,86,87,88,89,90,91,125,126,128,131,132,133,134,139,140,141,142,143,145,146,148,149,150,161,162,163,164,165,166,167,168,178,180,185,196,197,198,199,200,201,202,203,204,209,210,211,212,228,233,234,235,236,237,245,247,248,249,256,257,258,263,264,265,266,],[-12,-13,-15,-14,-11,-123,-122,-124,-61,-62,-66,-67,-68,-69,-130,-49,-52,-53,-16,-126,-125,115,-111,-112,127,-3,-4,-5,-6,-52,-111,-12,-13,-15,-14,-53,-124,-11,-105,-106,-107,-108,-50,-61,-62,-213,-12,-32,-11,-13,-14,-15,-12,-13,-15,-14,-11,-172,-45,-150,-109,127,-12,-122,-15,-13,-11,-123,-124,-14,-51,-31,-130,-101,-93,-11,-12,-13,-15,-14,-110,-212,-12,-13,-15,-11,-64,-12,-13,-15,-122,-130,-50,-12,-126,-12,-25,-26,-132,272,273,274,275,]),'NO_IGUAL':([5,7,9,10,12,13,14,15,26,27,28,29,30,31,32,40,41,42,46,48,51,52,53,54,71,74,75,76,77,78,80,81,82,85,86,87,88,89,90,91,125,126,128,131,132,133,134,139,140,141,142,143,145,146,148,149,161,162,163,164,165,166,167,168,178,180,185,196,197,198,199,200,201,202,203,204,209,210,211,212,228,233,234,235,236,237,245,247,248,249,256,257,258,],[-12,-13,-15,-14,-11,-123,-122,-124,-61,-62,-66,-67,-68,-69,-130,-49,-52,-53,-16,-126,-125,116,-111,-112,-52,-111,-12,-13,-15,-14,-53,-124,-11,-105,-106,-107,-108,-50,-61,-62,-213,-12,-32,-11,-13,-14,-15,-12,-13,-15,-14,-11,-172,-45,-150,-109,-12,-122,-15,-13,-11,-123,-124,-14,-51,-31,-130,-101,-93,-11,-12,-13,-15,-14,-110,-212,-12,-13,-15,-11,-64,-12,-13,-15,-122,-130,-50,-12,-126,-12,-25,-26,-132,]),'MAYOR_QUE':([5,7,9,10,12,15,26,27,30,31,40,41,42,46,55,71,75,76,77,78,80,81,82,85,86,87,88,89,90,91,125,126,128,131,132,133,134,139,140,141,142,143,146,161,163,164,165,167,168,170,171,172,173,178,180,187,191,192,193,194,203,204,209,210,211,212,228,233,234,235,245,247,249,256,257,],[-12,-13,-15,-14,-11,-93,-61,-62,-68,-69,-49,-52,-53,-16,118,-52,-12,-13,-15,-14,-53,-93,-11,-105,-106,-107,-108,-50,-61,-62,-213,-12,-32,-11,-13,-14,-15,-12,-13,-15,-14,-11,-45,-12,-15,-13,-11,-93,-14,238,239,240,241,-51,-31,-11,-13,-15,-12,-14,-110,-212,-12,-13,-15,-11,-64,-12,-13,-15,-50,-12,-12,-25,-26,]),'MENOR_QUE':([5,7,9,10,12,15,26,27,30,31,38,40,41,42,46,55,71,75,76,77,78,80,81,82,85,86,87,88,89,90,91,125,126,128,131,132,133,134,139,140,141,142,143,146,161,163,164,165,167,168,178,180,187,191,192,193,194,203,204,209,210,211,212,228,233,234,235,245,247,249,256,257,],[-12,-13,-15,-14,-11,-93,-61,-62,-68,-69,101,-49,-52,-53,-16,119,-52,-12,-13,-15,-14,-53,-93,-11,-105,-106,-107,-108,-50,-61,-62,-213,-12,-32,-11,-13,-14,-15,-12,-13,-15,-14,-11,-45,-12,-15,-13,-11,-93,-14,-51,-31,-11,-13,-15,-12,-14,-110,-212,-12,-13,-15,-11,-64,-12,-13,-15,-50,-12,-12,-25,-26,]),'MENOR_O_IGUAL':([5,7,9,10,12,15,26,27,30,31,40,41,42,46,55,71,75,76,77,78,80,81,82,85,86,87,88,89,90,91,125,126,128,131,132,133,134,139,140,141,142,143,146,161,163,164,165,167,168,178,180,187,191,192,193,194,203,204,209,210,211,212,228,233,234,235,245,247,249,256,257,],[-12,-13,-15,-14,-11,-93,-61,-62,-68,-69,-49,-52,-53,-16,120,-52,-12,-13,-15,-14,-53,-93,-11,-105,-106,-107,-108,-50,-61,-62,-213,-12,-32,-11,-13,-14,-15,-12,-13,-15,-14,-11,-45,-12,-15,-13,-11,-93,-14,-51,-31,-11,-13,-15,-12,-14,-110,-212,-12,-13,-15,-11,-64,-12,-13,-15,-50,-12,-12,-25,-26,]),'MAYOR_O_IGUAL':([5,7,9,10,12,15,26,27,30,31,40,41,42,46,55,71,75,76,77,78,80,81,82,85,86,87,88,89,90,91,125,126,128,131,132,133,134,139,140,141,142,143,146,161,163,164,165,167,168,178,180,187,191,192,193,194,203,204,209,210,211,212,228,233,234,235,245,247,249,256,257,],[-12,-13,-15,-14,-11,-93,-61,-62,-68,-69,-49,-52,-53,-16,121,-52,-12,-13,-15,-14,-53,-93,-11,-105,-106,-107,-108,-50,-61,-62,-213,-12,-32,-11,-13,-14,-15,-12,-13,-15,-14,-11,-45,-12,-15,-13,-11,-93,-14,-51,-31,-11,-13,-15,-12,-14,-110,-212,-12,-13,-15,-11,-64,-12,-13,-15,-50,-12,-12,-25,-26,]),'PUNTO':([13,22,24,26,27,],[66,67,84,93,94,]),'CORCH_DER':([28,29,281,282,283,284,285,286,287,288,298,300,302,304,309,310,311,312,],[-66,-67,289,-22,291,-28,293,-42,295,-46,-23,-29,-43,-47,-24,-30,-44,-48,]),'TOINT':([66,],[135,]),'TODOUBLE':([66,],[136,]),'READLINESYNC':([67,],[137,]),'WRITE':([84,],[151,]),'TOSTRING':([93,94,],[157,158,]),'STRING':([101,144,254,],[170,221,221,]),'INT':([101,144,250,254,262,],[171,218,267,218,267,]),'DOUBLE':([101,144,250,254,262,],[172,219,268,219,268,]),'BOOL':([101,144,254,262,],[173,220,220,271,]),'VOID':([144,254,],[222,222,]),'SET':([144,254,],[224,224,]),'MAP':([144,254,],[225,225,]),'PUNTOCOMA':([253,270,289,291,293,295,],[269,276,297,299,301,303,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'valores':([0,39,56,58,],[1,102,122,124,]),'valor':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[2,69,105,2,123,2,69,208,216,208,232,242,244,232,232,69,216,216,]),'datos':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'operaciones':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'estructura_dato':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'indexacion':([0,23,25,39,56,57,58,61,68,92,95,98,107,108,113,114,117,127,129,130,138,150,152,153,156,160,176,177,179,181,195,205,207,231,246,],[7,76,87,7,7,7,7,132,140,132,164,164,132,132,164,191,200,132,87,210,140,132,132,7,87,234,7,7,87,140,234,132,76,140,140,]),'read':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'ejecutar_funcion':([0,23,25,39,56,57,58,61,68,92,95,98,107,108,113,114,117,127,129,130,138,150,152,153,156,160,176,177,179,181,195,205,207,231,246,],[9,77,88,9,9,9,9,134,141,134,163,163,134,134,163,192,201,134,88,211,141,134,134,9,88,235,9,9,88,141,235,134,77,141,141,]),'negativo':([0,23,39,56,57,58,61,68,92,95,98,107,108,113,114,117,127,130,138,150,152,153,160,176,177,181,195,205,207,231,246,],[10,78,10,10,10,10,133,142,133,168,168,133,133,168,194,202,133,10,142,133,133,10,142,10,10,142,142,133,78,142,142,]),'casting':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'numero':([0,23,25,39,56,57,58,61,68,92,95,98,107,108,113,114,117,127,129,130,138,150,152,153,156,160,176,177,179,181,195,205,207,231,246,],[12,82,85,12,12,12,12,131,143,131,165,165,131,131,165,187,198,131,85,212,143,131,131,12,85,143,12,12,85,143,143,131,82,143,143,]),'bool':([0,23,39,47,56,57,58,68,72,95,98,113,114,130,138,153,160,176,177,181,195,207,231,246,280,296,308,],[14,14,14,110,14,14,14,14,110,162,162,162,188,14,14,14,236,14,14,14,14,14,14,14,288,304,288,]),'operacion_mat':([0,23,39,56,57,58,61,68,95,98,108,113,114,117,127,130,138,150,153,160,176,177,181,195,205,207,231,246,],[15,81,15,15,15,15,128,81,167,167,180,167,167,197,206,15,81,128,15,81,15,15,81,81,128,81,81,81,]),'operacion_log':([0,23,39,56,57,58,68,95,98,130,138,153,160,176,177,181,195,207,231,246,],[16,16,16,16,16,16,16,159,169,16,16,16,16,16,16,16,16,16,16,16,]),'operacion_unaria':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'operacion_autoasig':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'lista':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'conjunto':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'mapa':([0,23,39,56,57,58,68,130,138,153,160,176,177,181,195,207,231,246,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'operacion_mat_pos':([0,23,39,56,57,58,61,68,95,98,107,108,113,114,117,127,130,138,150,152,153,160,176,177,181,195,205,207,231,246,],[30,30,30,30,30,30,30,30,30,30,178,30,30,30,30,30,30,30,30,228,30,30,30,30,30,30,30,30,30,30,]),'operacion_mat_neg':([0,23,39,56,57,58,61,68,95,98,108,113,114,117,127,130,138,150,153,160,176,177,181,195,205,207,231,246,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'operacion_log_con_par':([0,23,39,47,56,57,58,68,72,95,98,113,114,130,138,153,160,176,177,181,195,207,231,246,],[32,32,32,111,32,32,32,32,111,32,32,185,185,32,32,32,237,32,32,237,32,32,32,32,]),'operacion_log_sin_par':([0,23,39,56,57,58,68,95,98,113,130,138,153,160,176,177,181,195,207,231,246,],[33,70,33,33,33,33,70,33,33,182,33,70,33,70,33,33,70,70,70,70,70,]),'operacion_log_not':([0,23,39,56,57,58,68,95,98,113,130,138,153,160,176,177,181,195,207,231,246,],[34,83,34,34,34,34,83,34,34,184,34,83,34,83,34,34,83,83,83,83,83,]),'operandos_log':([0,23,39,56,57,58,68,95,98,113,130,138,153,160,176,177,181,195,207,231,246,],[35,79,35,35,35,35,79,35,35,183,35,79,35,79,35,35,79,79,79,79,79,]),'operacion_mat_con_par':([0,23,25,39,56,57,58,61,68,95,98,107,108,113,114,117,127,129,130,138,150,152,153,160,176,177,179,181,195,205,207,231,246,],[40,40,89,40,40,40,40,40,40,40,40,40,40,40,40,40,40,89,40,40,40,40,40,40,40,40,245,40,40,40,40,40,40,]),'operacion_mat_sin_par':([0,23,39,56,57,58,61,68,92,95,98,107,108,113,114,117,127,130,138,150,152,153,160,176,177,181,195,205,207,231,246,],[41,71,41,41,41,41,41,71,154,41,41,41,41,41,41,41,41,71,71,41,41,41,71,41,41,71,71,41,71,71,71,]),'operando_mat':([0,23,39,56,57,58,61,68,92,95,98,107,108,113,114,117,127,130,138,150,152,153,160,176,177,181,195,205,207,231,246,],[42,80,42,42,42,42,42,80,155,42,42,42,42,42,42,42,42,80,80,42,42,42,80,42,42,80,80,42,80,80,80,]),'operacion_log_not_sin_par':([0,23,39,56,57,58,68,95,98,113,130,138,153,160,176,177,181,195,207,231,246,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'operacion_log_not_con_par':([0,23,39,56,57,58,68,95,98,113,130,138,153,160,176,177,181,195,207,231,246,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'operacion_comp':([0,23,39,56,57,58,68,95,98,113,130,138,153,160,176,177,181,195,207,231,246,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'casting_num':([0,23,39,56,57,58,61,68,92,95,98,107,108,113,114,117,127,130,138,150,152,153,160,176,177,181,195,205,207,231,246,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'operacion_comp_con_par':([0,23,39,56,57,58,68,95,98,113,114,130,138,153,160,176,177,181,195,207,231,246,],[48,48,48,48,48,48,48,48,48,48,190,48,48,48,48,48,48,248,248,48,248,248,]),'operacion_comp_sin_par':([0,23,39,56,57,58,68,95,98,113,130,138,153,160,176,177,181,195,207,231,246,],[49,73,49,49,49,49,73,49,49,49,49,73,49,73,49,49,73,73,73,73,73,]),'operacion_comp_eq':([0,23,39,56,57,58,68,95,98,113,130,138,153,160,176,177,181,195,207,231,246,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'operacion_comp_orden':([0,23,39,56,57,58,68,95,98,113,114,130,138,153,160,176,177,181,195,207,231,246,],[51,51,51,51,51,51,51,51,51,51,189,51,51,51,51,51,51,51,51,51,51,51,]),'operando_comp_eq':([0,23,39,56,57,58,68,95,98,113,114,130,138,153,160,176,177,181,195,207,231,246,],[52,52,52,52,52,52,52,52,52,52,186,52,52,52,52,52,52,52,52,52,52,52,]),'operacion_comp_orden_sin_par':([0,23,39,56,57,58,68,95,98,113,114,130,138,153,160,176,177,181,195,207,231,246,],[53,74,53,53,53,53,74,53,53,53,53,53,74,53,74,53,53,74,74,74,74,74,]),'operacion_comp_orden_con_par':([0,23,39,56,57,58,68,95,98,113,114,130,138,153,160,176,177,181,195,207,231,246,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'operando_comp_orden':([0,23,39,56,57,58,68,95,98,113,114,117,130,138,153,160,176,177,181,195,207,231,246,],[55,55,55,55,55,55,55,55,55,55,55,196,55,55,55,55,55,55,55,55,55,55,55,]),'operador_mat':([5,40,42,75,80,89,126,139,155,161,193,199,209,233,247,249,],[61,107,108,150,108,152,205,150,108,205,205,205,150,150,150,150,]),'operadores_log':([32,35,79,183,237,],[95,98,98,98,95,]),'claves_valores':([39,177,],[104,243,]),'clave_valor':([39,177,],[106,106,]),'operando_log_not':([47,72,],[109,147,]),'operador_comp_eq':([52,],[114,]),'operador_comp_orden':([55,],[117,]),'tipo_dato':([144,254,],[217,217,]),'cuerpo_lista_string':([277,305,],[281,309,]),'cuerpo_lista_integer':([278,306,],[283,310,]),'cuerpo_lista_double':([279,307,],[285,311,]),'cuerpo_lista_boolean':([280,308,],[287,312,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> valores","S'",1,None,None,None),
  ('valores -> valor','valores',1,'p_valores','sintacticoOp.py',5),
  ('valores -> valor COMA valores','valores',3,'p_valores','sintacticoOp.py',6),
  ('operador_mat -> MAS','operador_mat',1,'p_operador_mat','sintactico.py',6),
  ('operador_mat -> RESTA','operador_mat',1,'p_operador_mat','sintactico.py',7),
  ('operador_mat -> MULTIPL','operador_mat',1,'p_operador_mat','sintactico.py',8),
  ('operador_mat -> DIVISION','operador_mat',1,'p_operador_mat','sintactico.py',9),
  ('all -> simbolos_globales','all',1,'p_all','sintaxis.py',10),
  ('clave_valor -> valor DOSPUNTOS valor','clave_valor',3,'p_clave_valor','sintacticoOp.py',12),
  ('simbolo_global -> declaracion_asign','simbolo_global',1,'p_simbolo_global','sintaxis.py',16),
  ('simbolo_global -> funcion','simbolo_global',1,'p_simbolo_global','sintaxis.py',17),
  ('operando_mat -> numero','operando_mat',1,'p_operando_mat','sintactico.py',16),
  ('operando_mat -> VARIABLE','operando_mat',1,'p_operando_mat','sintactico.py',17),
  ('operando_mat -> indexacion','operando_mat',1,'p_operando_mat','sintactico.py',18),
  ('operando_mat -> negativo','operando_mat',1,'p_operando_mat','sintactico.py',19),
  ('operando_mat -> ejecutar_funcion','operando_mat',1,'p_operando_mat','sintactico.py',20),
  ('operando_mat -> casting_num','operando_mat',1,'p_operando_mat','sintactico.py',21),
  ('claves_valores -> clave_valor','claves_valores',1,'p_claves_valores','sintacticoOp.py',18),
  ('claves_valores -> clave_valor COMA claves_valores','claves_valores',3,'p_claves_valores','sintacticoOp.py',19),
  ('simbolos_globales -> simbolo_global','simbolos_globales',1,'p_simbolos_globales','sintaxis.py',23),
  ('simbolos_globales -> simbolo_global simbolos_globales','simbolos_globales',2,'p_simbolos_globales','sintaxis.py',24),
  ('simbolos_globales -> empty','simbolos_globales',1,'p_simbolos_globales','sintaxis.py',25),
  ('cuerpo_lista_string -> CADENA','cuerpo_lista_string',1,'p_cuerpo_lista_STRING','sintacticoOp.py',24),
  ('cuerpo_lista_string -> CADENA COMA CADENA','cuerpo_lista_string',3,'p_cuerpo_lista_STRING','sintacticoOp.py',25),
  ('cuerpo_lista_string -> CADENA COMA CADENA COMA cuerpo_lista_string','cuerpo_lista_string',5,'p_cuerpo_lista_STRING','sintacticoOp.py',26),
  ('casting_num -> LPARENT valor AS INT RPARENT','casting_num',5,'p_casting_num','sintactico.py',28),
  ('casting_num -> LPARENT valor AS DOUBLE RPARENT','casting_num',5,'p_casting_num','sintactico.py',29),
  ('empty -> <empty>','empty',0,'p_empty','sintaxis.py',31),
  ('cuerpo_lista_integer -> INTEGER','cuerpo_lista_integer',1,'p_cuerpo_lista_INTEGER','sintacticoOp.py',31),
  ('cuerpo_lista_integer -> INTEGER COMA INTEGER','cuerpo_lista_integer',3,'p_cuerpo_lista_INTEGER','sintacticoOp.py',32),
  ('cuerpo_lista_integer -> INTEGER COMA INTEGER COMA cuerpo_lista_integer','cuerpo_lista_integer',5,'p_cuerpo_lista_INTEGER','sintacticoOp.py',33),
  ('operacion_mat_sin_par -> operando_mat operador_mat operacion_mat','operacion_mat_sin_par',3,'p_operacion_mat_sin_par','sintactico.py',35),
  ('operacion_mat_sin_par -> VARIABLE operador_mat operacion_mat','operacion_mat_sin_par',3,'p_operacion_mat_sin_par','sintactico.py',36),
  ('sentencia -> declaracion_var','sentencia',1,'p_sentencia','sintaxis.py',37),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia','sintaxis.py',38),
  ('sentencia -> declaracion_asign','sentencia',1,'p_sentencia','sintaxis.py',39),
  ('sentencia -> operaciones PUNTOCOMA','sentencia',2,'p_sentencia','sintaxis.py',40),
  ('sentencia -> print','sentencia',1,'p_sentencia','sintaxis.py',41),
  ('sentencia -> estructura_control','sentencia',1,'p_sentencia','sintaxis.py',42),
  ('sentencia -> return','sentencia',1,'p_sentencia','sintaxis.py',43),
  ('sentencia -> continue','sentencia',1,'p_sentencia','sintaxis.py',44),
  ('sentencia -> break','sentencia',1,'p_sentencia','sintaxis.py',45),
  ('cuerpo_lista_double -> FLOAT','cuerpo_lista_double',1,'p_cuerpo_lista_DOUBLE','sintacticoOp.py',38),
  ('cuerpo_lista_double -> FLOAT COMA FLOAT','cuerpo_lista_double',3,'p_cuerpo_lista_DOUBLE','sintacticoOp.py',39),
  ('cuerpo_lista_double -> FLOAT COMA FLOAT COMA cuerpo_lista_double','cuerpo_lista_double',5,'p_cuerpo_lista_DOUBLE','sintacticoOp.py',40),
  ('operacion_mat_con_par -> LPARENT operacion_mat_sin_par RPARENT','operacion_mat_con_par',3,'p_operacion_mat_con_par','sintactico.py',42),
  ('cuerpo_lista_boolean -> bool','cuerpo_lista_boolean',1,'p_cuerpo_lista_BOOLEAN','sintacticoOp.py',44),
  ('cuerpo_lista_boolean -> bool COMA bool','cuerpo_lista_boolean',3,'p_cuerpo_lista_BOOLEAN','sintacticoOp.py',45),
  ('cuerpo_lista_boolean -> bool COMA bool COMA cuerpo_lista_boolean','cuerpo_lista_boolean',5,'p_cuerpo_lista_BOOLEAN','sintacticoOp.py',46),
  ('operacion_mat_pos -> operacion_mat_con_par','operacion_mat_pos',1,'p_operacion_mat_pos','sintactico.py',49),
  ('operacion_mat_pos -> RESTA operacion_mat_con_par','operacion_mat_pos',2,'p_operacion_mat_pos','sintactico.py',50),
  ('operacion_mat_pos -> operacion_mat_con_par operador_mat operacion_mat_pos','operacion_mat_pos',3,'p_operacion_mat_pos','sintactico.py',51),
  ('operacion_mat_pos -> operacion_mat_sin_par','operacion_mat_pos',1,'p_operacion_mat_pos','sintactico.py',52),
  ('operacion_mat_pos -> operando_mat','operacion_mat_pos',1,'p_operacion_mat_pos','sintactico.py',53),
  ('sentencias -> sentencia','sentencias',1,'p_sentencias','sintaxis.py',51),
  ('sentencias -> sentencia sentencias','sentencias',2,'p_sentencias','sintaxis.py',52),
  ('sentencias -> empty','sentencias',1,'p_sentencias','sintaxis.py',53),
  ('lista -> LIST MENOR_QUE STRING MAYOR_QUE VARIABLE IGUAL CORCH_IZQ cuerpo_lista_string CORCH_DER PUNTOCOMA','lista',10,'p_lista','sintacticoOp.py',53),
  ('lista -> LIST MENOR_QUE INT MAYOR_QUE VARIABLE IGUAL CORCH_IZQ cuerpo_lista_integer CORCH_DER PUNTOCOMA','lista',10,'p_lista','sintacticoOp.py',54),
  ('lista -> LIST MENOR_QUE DOUBLE MAYOR_QUE VARIABLE IGUAL CORCH_IZQ cuerpo_lista_double CORCH_DER PUNTOCOMA','lista',10,'p_lista','sintacticoOp.py',55),
  ('lista -> LIST MENOR_QUE BOOL MAYOR_QUE VARIABLE IGUAL CORCH_IZQ cuerpo_lista_boolean CORCH_DER PUNTOCOMA','lista',10,'p_lista','sintacticoOp.py',56),
  ('numero -> INTEGER','numero',1,'p_numero','sintaxis.py',59),
  ('numero -> FLOAT','numero',1,'p_numero','sintaxis.py',60),
  ('operacion_mat_neg -> RESTA operacion_mat_con_par','operacion_mat_neg',2,'p_operacion_mat_neg','sintactico.py',59),
  ('operacion_mat_neg -> RESTA operacion_mat_con_par operador_mat operacion_mat_pos','operacion_mat_neg',4,'p_operacion_mat_neg','sintactico.py',60),
  ('string -> CADENA MAS CADENA','string',3,'p_concatenacion_string','sintacticoOp.py',62),
  ('bool -> TRUE','bool',1,'p_bool','sintaxis.py',66),
  ('bool -> FALSE','bool',1,'p_bool','sintaxis.py',67),
  ('operacion_mat -> operacion_mat_pos','operacion_mat',1,'p_operacion_mat','sintactico.py',66),
  ('operacion_mat -> operacion_mat_neg','operacion_mat',1,'p_operacion_mat','sintactico.py',67),
  ('string -> CADENA MULTIPL CADENA','string',3,'p_repeticion_string','sintacticoOp.py',65),
  ('casting -> CADENA PUNTO TOINT LPARENT RPARENT','casting',5,'p_string_casting_toInt','sintacticoOp.py',67),
  ('casting -> CADENA PUNTO TODOUBLE LPARENT RPARENT','casting',5,'p_string_casting_toDouble','sintacticoOp.py',69),
  ('casting -> INTEGER PUNTO TOSTRING LPARENT RPARENT','casting',5,'p_string_casting_toString','sintacticoOp.py',71),
  ('casting -> FLOAT PUNTO TOSTRING LPARENT RPARENT','casting',5,'p_string_casting_toString','sintacticoOp.py',72),
  ('datos -> numero','datos',1,'p_datos','sintaxis.py',73),
  ('datos -> CADENA','datos',1,'p_datos','sintaxis.py',74),
  ('datos -> bool','datos',1,'p_datos','sintaxis.py',75),
  ('operador_comp_orden -> MAYOR_QUE','operador_comp_orden',1,'p_operador_comp_orden','sintactico.py',73),
  ('operador_comp_orden -> MENOR_QUE','operador_comp_orden',1,'p_operador_comp_orden','sintactico.py',74),
  ('operador_comp_orden -> MENOR_O_IGUAL','operador_comp_orden',1,'p_operador_comp_orden','sintactico.py',75),
  ('operador_comp_orden -> MAYOR_O_IGUAL','operador_comp_orden',1,'p_operador_comp_orden','sintactico.py',76),
  ('conjunto -> LLAVEL valores LLAVER','conjunto',3,'p_conjunto','sintacticoOp.py',79),
  ('conjunto -> LLAVEL LLAVER','conjunto',2,'p_conjunto','sintacticoOp.py',80),
  ('valor -> datos','valor',1,'p_valor','sintaxis.py',81),
  ('valor -> operaciones','valor',1,'p_valor','sintaxis.py',82),
  ('valor -> VARIABLE','valor',1,'p_valor','sintaxis.py',83),
  ('valor -> estructura_dato','valor',1,'p_valor','sintaxis.py',84),
  ('valor -> indexacion','valor',1,'p_valor','sintaxis.py',85),
  ('valor -> read','valor',1,'p_valor','sintaxis.py',86),
  ('valor -> ejecutar_funcion','valor',1,'p_valor','sintaxis.py',87),
  ('valor -> negativo','valor',1,'p_valor','sintaxis.py',88),
  ('valor -> casting','valor',1,'p_valor','sintaxis.py',89),
  ('operando_comp_orden -> operacion_mat','operando_comp_orden',1,'p_operando_comp_orden','sintactico.py',82),
  ('operando_comp_orden -> numero','operando_comp_orden',1,'p_operando_comp_orden','sintactico.py',83),
  ('operando_comp_orden -> VARIABLE','operando_comp_orden',1,'p_operando_comp_orden','sintactico.py',84),
  ('operando_comp_orden -> indexacion','operando_comp_orden',1,'p_operando_comp_orden','sintactico.py',85),
  ('operando_comp_orden -> ejecutar_funcion','operando_comp_orden',1,'p_operando_comp_orden','sintactico.py',86),
  ('operando_comp_orden -> negativo','operando_comp_orden',1,'p_operando_comp_orden','sintactico.py',87),
  ('mapa -> LLAVEL claves_valores LLAVER','mapa',3,'p_mapa','sintacticoOp.py',85),
  ('mapa -> LLAVEL LLAVER','mapa',2,'p_mapa','sintacticoOp.py',86),
  ('operacion_comp_orden_sin_par -> operando_comp_orden operador_comp_orden operando_comp_orden','operacion_comp_orden_sin_par',3,'p_operacion_comp_orden_sin_par','sintactico.py',94),
  ('estructura_dato -> lista','estructura_dato',1,'p_estructura_dato','sintacticoOp.py',94),
  ('estructura_dato -> conjunto','estructura_dato',1,'p_estructura_dato','sintacticoOp.py',95),
  ('estructura_dato -> mapa','estructura_dato',1,'p_estructura_dato','sintacticoOp.py',96),
  ('negativo -> RESTA numero','negativo',2,'p_negativo','sintaxis.py',95),
  ('negativo -> RESTA VARIABLE','negativo',2,'p_negativo','sintaxis.py',96),
  ('negativo -> RESTA indexacion','negativo',2,'p_negativo','sintaxis.py',97),
  ('negativo -> RESTA ejecutar_funcion','negativo',2,'p_negativo','sintaxis.py',98),
  ('operacion_comp_orden_con_par -> LPARENT operacion_comp_orden_sin_par RPARENT','operacion_comp_orden_con_par',3,'p_operacion_comp_orden_con_par','sintactico.py',100),
  ('indexacion -> VARIABLE CORCH_IZQ valor CORCH_IZQ','indexacion',4,'p_indexacion','sintaxis.py',104),
  ('operacion_comp_orden -> operacion_comp_orden_sin_par','operacion_comp_orden',1,'p_operacion_comp_orden','sintactico.py',106),
  ('operacion_comp_orden -> operacion_comp_orden_con_par','operacion_comp_orden',1,'p_operacion_comp_orden','sintactico.py',107),
  ('tipo_dato -> BOOL','tipo_dato',1,'p_tipo_dato','sintaxis.py',109),
  ('tipo_dato -> DOUBLE','tipo_dato',1,'p_tipo_dato','sintaxis.py',110),
  ('tipo_dato -> INT','tipo_dato',1,'p_tipo_dato','sintaxis.py',111),
  ('tipo_dato -> STRING','tipo_dato',1,'p_tipo_dato','sintaxis.py',112),
  ('tipo_dato -> VOID','tipo_dato',1,'p_tipo_dato','sintaxis.py',113),
  ('tipo_dato -> LIST','tipo_dato',1,'p_tipo_dato','sintaxis.py',114),
  ('tipo_dato -> SET','tipo_dato',1,'p_tipo_dato','sintaxis.py',115),
  ('tipo_dato -> MAP','tipo_dato',1,'p_tipo_dato','sintaxis.py',116),
  ('operando_comp_eq -> numero','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',114),
  ('operando_comp_eq -> bool','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',115),
  ('operando_comp_eq -> CADENA','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',116),
  ('operando_comp_eq -> operacion_mat','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',117),
  ('operando_comp_eq -> operacion_comp_orden','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',118),
  ('operando_comp_eq -> operacion_comp_con_par','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',119),
  ('operando_comp_eq -> indexacion','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',120),
  ('operando_comp_eq -> ejecutar_funcion','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',121),
  ('operando_comp_eq -> VARIABLE','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',122),
  ('operando_comp_eq -> operacion_log_con_par','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',123),
  ('operando_comp_eq -> negativo','operando_comp_eq',1,'p_operando_comp_eq','sintactico.py',124),
  ('operando_comp_eq -> LPARENT valor AS BOOL RPARENT','operando_comp_eq',5,'p_operando_comp_eq','sintactico.py',125),
  ('declaradores -> tipo_dato','declaradores',1,'p_declaradores','sintaxis.py',122),
  ('declaradores -> FINAL','declaradores',1,'p_declaradores','sintaxis.py',123),
  ('declaradores -> VAR','declaradores',1,'p_declaradores','sintaxis.py',124),
  ('declaracion_var -> declaradores VARIABLE PUNTOCOMA','declaracion_var',3,'p_declaracion_var','sintaxis.py',130),
  ('operador_comp_eq -> IGUAL','operador_comp_eq',1,'p_operador_comp_eq','sintactico.py',131),
  ('operador_comp_eq -> NO_IGUAL','operador_comp_eq',1,'p_operador_comp_eq','sintactico.py',132),
  ('declaracion_asign -> tipo_dato VARIABLE IGUAL valor PUNTOCOMA','declaracion_asign',5,'p_declaracion_asign','sintaxis.py',136),
  ('declaracion_asign -> FINAL VARIABLE IGUAL valor PUNTOCOMA','declaracion_asign',5,'p_declaracion_asign','sintaxis.py',137),
  ('declaracion_asign -> VAR VARIABLE IGUAL valor PUNTOCOMA','declaracion_asign',5,'p_declaracion_asign','sintaxis.py',138),
  ('declaracion_asign -> CONST VARIABLE IGUAL valor PUNTOCOMA','declaracion_asign',5,'p_declaracion_asign','sintaxis.py',139),
  ('operacion_comp_eq -> operando_comp_eq operador_comp_eq operando_comp_eq','operacion_comp_eq',3,'p_operacion_comp_eq','sintactico.py',138),
  ('operacion_comp_sin_par -> operacion_comp_eq','operacion_comp_sin_par',1,'p_operacion_comp_sin_par','sintactico.py',144),
  ('operacion_comp_sin_par -> operacion_comp_orden','operacion_comp_sin_par',1,'p_operacion_comp_sin_par','sintactico.py',145),
  ('asignacion -> VARIABLE IGUAL valor PUNTOCOMA','asignacion',4,'p_asignacion','sintaxis.py',145),
  ('asignacion -> VARIABLE CORCH_IZQ valor CORCH_DER IGUAL valor PUNTOCOMA','asignacion',7,'p_asignacion','sintaxis.py',146),
  ('asignacion -> operacion_autoasig PUNTOCOMA','asignacion',2,'p_asignacion','sintaxis.py',147),
  ('asignacion -> declaracion_asign','asignacion',1,'p_asignacion','sintaxis.py',148),
  ('operacion_comp_con_par -> LPARENT operacion_comp_sin_par RPARENT','operacion_comp_con_par',3,'p_operacion_comp_con_par','sintactico.py',151),
  ('print -> PRINT LPARENT valor RPARENT PUNTOCOMA','print',5,'p_print','sintaxis.py',153),
  ('operacion_comp -> operacion_comp_con_par','operacion_comp',1,'p_operacion_comp','sintactico.py',157),
  ('operacion_comp -> operacion_comp_sin_par','operacion_comp',1,'p_operacion_comp','sintactico.py',158),
  ('cuerpo_estruct -> LLAVEL sentencias LLAVER','cuerpo_estruct',3,'p_cuerpo_estruct','sintaxis.py',158),
  ('cuerpo_estruct -> sentencia','cuerpo_estruct',1,'p_cuerpo_estruct','sintaxis.py',159),
  ('operadores_log -> AND','operadores_log',1,'p_operadores_log','sintactico.py',164),
  ('operadores_log -> OR','operadores_log',1,'p_operadores_log','sintactico.py',165),
  ('for -> FOR LPARENT IGUAL operacion_log PUNTOCOMA operaciones RPARENT cuerpo_estruct','for',8,'p_for','sintaxis.py',166),
  ('for -> FOR LPARENT VARIABLE IN VARIABLE RPARENT cuerpo_estruct','for',7,'p_for','sintaxis.py',167),
  ('for -> FOR LPARENT tipo_dato VARIABLE IN VARIABLE RPARENT cuerpo_estruct','for',8,'p_for','sintaxis.py',168),
  ('for -> FOR LPARENT VAR VARIABLE IN VARIABLE RPARENT cuerpo_estruct','for',8,'p_for','sintaxis.py',169),
  ('operandos_log -> operacion_comp','operandos_log',1,'p_operandos_log','sintactico.py',171),
  ('operandos_log -> operacion_log_not','operandos_log',1,'p_operandos_log','sintactico.py',172),
  ('operandos_log -> VARIABLE','operandos_log',1,'p_operandos_log','sintactico.py',173),
  ('operandos_log -> bool','operandos_log',1,'p_operandos_log','sintactico.py',174),
  ('operandos_log -> ejecutar_funcion','operandos_log',1,'p_operandos_log','sintactico.py',175),
  ('operandos_log -> indexacion','operandos_log',1,'p_operandos_log','sintactico.py',176),
  ('if -> IF LPARENT operacion_log RPARENT cuerpo_estruct','if',5,'p_if','sintaxis.py',176),
  ('operacion_log_sin_par -> operandos_log operadores_log operacion_log','operacion_log_sin_par',3,'p_operacion_log_sin_par','sintactico.py',182),
  ('operacion_log_sin_par -> operandos_log','operacion_log_sin_par',1,'p_operacion_log_sin_par','sintactico.py',183),
  ('if_else -> IF LPARENT operacion_log RPARENT cuerpo_estruct ELSE cuerpo_estruct','if_else',7,'p_if_else','sintaxis.py',183),
  ('operacion_log_con_par -> LPARENT operacion_log_sin_par RPARENT','operacion_log_con_par',3,'p_operacion_log_con_par','sintactico.py',189),
  ('while -> WHILE LPARENT operacion_log RPARENT cuerpo_estruct','while',5,'p_while','sintaxis.py',190),
  ('operando_log_not -> bool','operando_log_not',1,'p_operando_log_not','sintactico.py',195),
  ('operando_log_not -> operacion_log_con_par','operando_log_not',1,'p_operando_log_not','sintactico.py',196),
  ('operando_log_not -> VARIABLE','operando_log_not',1,'p_operando_log_not','sintactico.py',197),
  ('estructura_control -> if','estructura_control',1,'p_estructura_control','sintaxis.py',196),
  ('estructura_control -> if_else','estructura_control',1,'p_estructura_control','sintaxis.py',197),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','sintaxis.py',198),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','sintaxis.py',199),
  ('operacion_log_not_sin_par -> NEGACION operando_log_not','operacion_log_not_sin_par',2,'p_operacion_log_not_sin_par','sintactico.py',203),
  ('break -> BREAK PUNTOCOMA','break',2,'p_break','sintaxis.py',204),
  ('continue -> CONTINUE PUNTOCOMA','continue',2,'p_continue','sintaxis.py',208),
  ('operacion_log_not_con_par -> LPARENT NEGACION operando_log_not RPARENT','operacion_log_not_con_par',4,'p_operacion_log_not_con_par','sintactico.py',209),
  ('read -> STDIN PUNTO READLINESYNC LPARENT RPARENT PUNTOCOMA','read',6,'p_read','sintaxis.py',213),
  ('operacion_log_not -> operacion_log_not_sin_par','operacion_log_not',1,'p_operacion_log_not','sintactico.py',215),
  ('operacion_log_not -> operacion_log_not_con_par','operacion_log_not',1,'p_operacion_log_not','sintactico.py',216),
  ('read -> STDOUT PUNTO WRITE LPARENT CADENA RPARENT PUNTOCOMA','read',7,'p_write','sintaxis.py',218),
  ('operacion_log -> operacion_log_con_par','operacion_log',1,'p_operacion_log','sintactico.py',223),
  ('operacion_log -> operacion_log_con_par operadores_log operacion_log','operacion_log',3,'p_operacion_log','sintactico.py',224),
  ('operacion_log -> operacion_log_sin_par','operacion_log',1,'p_operacion_log','sintactico.py',225),
  ('operacion_log -> operacion_log_not','operacion_log',1,'p_operacion_log','sintactico.py',226),
  ('operacion_log -> operandos_log','operacion_log',1,'p_operacion_log','sintactico.py',227),
  ('return -> RETURN valor PUNTOCOMA','return',3,'p_return','sintaxis.py',224),
  ('return -> RETURN PUNTOCOMA','return',2,'p_return','sintaxis.py',225),
  ('arg_funcion -> VARIABLE','arg_funcion',1,'p_arg_funcion','sintaxis.py',231),
  ('arg_funcion -> VAR VARIABLE','arg_funcion',2,'p_arg_funcion','sintaxis.py',232),
  ('arg_funcion -> tipo_dato VARIABLE','arg_funcion',2,'p_arg_funcion','sintaxis.py',233),
  ('operacion_unaria -> VARIABLE AUTOINCREMENTO','operacion_unaria',2,'p_operacion_unaria','sintactico.py',233),
  ('operacion_unaria -> VARIABLE AUTODECREMENTO','operacion_unaria',2,'p_operacion_unaria','sintactico.py',234),
  ('operacion_unaria -> AUTOINCREMENTO VARIABLE','operacion_unaria',2,'p_operacion_unaria','sintactico.py',235),
  ('operacion_unaria -> AUTODECREMENTO VARIABLE','operacion_unaria',2,'p_operacion_unaria','sintactico.py',236),
  ('args_funcion -> arg_funcion COMA args_funcion','args_funcion',3,'p_args_funcion','sintaxis.py',239),
  ('args_funcion -> arg_funcion','args_funcion',1,'p_args_funcion','sintaxis.py',240),
  ('args_funcion -> empty','args_funcion',1,'p_args_funcion','sintaxis.py',241),
  ('operaciones -> operacion_mat','operaciones',1,'p_operaciones','sintactico.py',242),
  ('operaciones -> operacion_log','operaciones',1,'p_operaciones','sintactico.py',243),
  ('operaciones -> operacion_unaria','operaciones',1,'p_operaciones','sintactico.py',244),
  ('operaciones -> operacion_autoasig','operaciones',1,'p_operaciones','sintactico.py',245),
  ('funcion -> tipo_dato VARIABLE LPARENT args_funcion RPARENT LLAVEL sentencias LLAVER','funcion',8,'p_declarar_funcion','sintaxis.py',247),
  ('operacion_autoasig -> VARIABLE operador_mat IGUAL operacion_mat','operacion_autoasig',4,'p_operacion_autoasig','sintactico.py',250),
  ('ejecutar_funcion -> VARIABLE LPARENT valores RPARENT','ejecutar_funcion',4,'p_ejecutar_funcion','sintaxis.py',253),
  ('ejecutar_funcion -> VARIABLE LPARENT RPARENT','ejecutar_funcion',3,'p_ejecutar_funcion','sintaxis.py',254),
  ('casting -> LPARENT valor AS tipo_dato RPARENT','casting',5,'p_casting','sintaxis.py',259),
]
